{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2370843\\\\OneDrive - Cognizant\\\\Desktop\\\\Project\\\\IMS-react\\\\frontend\\\\src\\\\pages\\\\TransactionDetailsPage.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// import React, { useState, useEffect } from \"react\";\n// import Layout from \"../component/Layout\";\n// import ApiService from \"../service/ApiService\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const PEXELS_API_KEY = 'TkOcFNcK1JNYwaHBziZwMVXoeQMwBUweo7C7z3RsEotA1uO0IcuScJ4d'; // Replace with your Pexels API key\n\n// // const importAll = (r) => {\n// //   let images = {};\n// //   r.keys().forEach((item, index) => {\n// //     images[item.replace('./', '')] = r(item);\n// //   });\n// //   return images;\n// // };\n\n// // Import all images from the assets directory\n// // const localImages = importAll(require.context('../assets', false, /\\.(png|jpe?g|svg)$/));\n\n// const TransactionDetailsPage = () => {\n//   const { transactionId } = useParams();\n//   const [transaction, setTransaction] = useState(null);\n//   const [message, setMessage] = useState(\"\");\n//   const [status, setStatus] = useState(\"\");\n\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const getTransaction = async () => {\n//       try {\n//         const transactionData = await ApiService.getTransactionById(transactionId);\n\n//         if (transactionData.status === 200) {\n//             setTransaction(transactionData.transaction);\n//             setStatus(transactionData.transaction.status);\n//         }\n//       } catch (error) {\n//         showMessage(\n//           error.response?.data?.message || \"Error Getting a transaction: \" + error\n//         );\n//       }\n//     };\n\n//     getTransaction();\n//   }, [transactionId]);\n\n// //update transaction status\n// const handleUpdateStatus = async()=>{\n//     try {\n//         ApiService.updateTransactionStatus(transactionId, status);\n//         navigate(\"/transaction\")\n//     } catch (error) {\n//         showMessage(\n//           error.response?.data?.message || \"Error Updating a transactions: \" + error\n//         );\n\n//     }\n// }\n\n//   //Method to show message or errors\n//   const showMessage = (msg) => {\n//     setMessage(msg);\n//     setTimeout(() => {\n//       setMessage(\"\");\n//     }, 4000);\n//   };\n\n//   // naya change yaha hai \n\n//   // Function to fetch image from Pexels API\n//   const fetchImageFromPexels = async (query) => {\n//     try {\n//       const response = await axios.get(`https://api.pexels.com/v1/search?query=${query}&per_page=1`, {\n//         headers: {\n//           Authorization: PEXELS_API_KEY,\n//         },\n//       });\n//       return response.data.photos[0]?.src?.medium || 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\n//     } catch (error) {\n//       console.error('Error fetching image from Pexels:', error);\n//       return 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\n//     }\n//   };\n\n//   // Function to get image URL (local or Pexels)\n//   const getImageUrl = async (productName) => {\n//     // Check for local image first\n//     console.log(\"imgae hbfjsfkf fks f fks :: \"+ productName);\n//     // const localImageKey = Object.keys(localImages).find((key) =>\n//     //   key.toLowerCase().includes(productName.toLowerCase())\n//     // );\n\n//     // if (localImageKey) {\n//     //   return localImages[localImageKey]; // Return local image if found\n//     // }\n\n//     // If local image not found, fetch from Pexels\n//     const pexelsImageUrl = await fetchImageFromPexels(productName);\n\n//     console.log(pexelsImageUrl);\n//     return pexelsImageUrl;\n//   };\n\n//   return(\n//     <Layout>\n\n//       {message && <p className=\"message\">{message}</p>}\n//       <div className=\"transaction-details-page\">\n//         {transaction && (\n//            <>\n//            {/* Transaction base information */}\n//            <div className=\"section-card\">\n//                 <h2>Transaction Information</h2>\n//                 <p>Type: {transaction.transactionType}</p>\n//                 <p>Status: {transaction.status}</p>\n//                 <p>Description: {transaction.description}</p>\n//                 <p>Note: {transaction.note}</p>\n//                 <p>Total Products: {transaction.totalProducts}</p>\n//                 <p>Total Price: {transaction.totalPrice.toFixed(2)}</p>\n//                 <p>Create AT: {new Date(transaction.createdAt).toLocaleString()}</p>\n\n//                 {transaction.updatedAt && (\n//                 <p>Updated At: {new Date(transaction.updatedAt).toLocaleString()}</p>\n//                 )}\n//            </div>\n\n//            {/* Product information of the transaction */}\n//            <div className=\"section-card\">\n//                 <h2>Product Information</h2>\n//                 <p>Name: {transaction.product.name}</p>\n//                 <p>SKU: {transaction.product.sku}</p>\n//                 <p>Price: {transaction.product.price.toFixed(2)}</p>\n//                 <p>Stock Quantity: {transaction.product.stockQuantity}</p>\n//                 <p>Description: {transaction.product.description}</p>\n// {/* \n//                 {transaction.product.imageUrl && (\n//                 <img src={getImageUrl(`${transaction.product.name}`)} alt={transaction.product.name} />\n//                 )} */}\n//                  {getImageUrl && (\n//                 <img src={getImageUrl(`${transaction.product.name}`)} alt={transaction.product.name} />\n//               )}\n//            </div>\n\n//            {/* User information who made the transaction */}\n//            <div className=\"section-card\">\n//                 <h2>User Information</h2>\n//                 <p>Name: {transaction.user.name}</p>\n//                 <p>Email: {transaction.user.email}</p>\n//                 <p>Phone Number: {transaction.user.phoneNumber}</p>\n//                 <p>Role: {transaction.user.role}</p>\n//                 <p>Create AT: {new Date(transaction.createdAt).toLocaleString()}</p>\n\n//            </div>\n\n//            {/* Supplier information who made the transaction */}\n//            {transaction.suppliers && (\n//            <div className=\"section-card\">\n//                 <h2>Supplier Information</h2>\n//                 <p>Name: {transaction.supplier.name}</p>\n//                 <p>Contact Address: {transaction.supplier.contactInfo}</p>\n//                 <p>Address: {transaction.supplier.address}</p> \n//            </div>\n//            )}\n\n//            {/* UPDATE TRANSACTION STATUS */}\n//            <div className=\"section-card transaction-staus-update\">\n//             <label>Status: </label>\n//             <select \n//             value={status}\n//             onChange={(e)=> setStatus(e.target.value)}\n//             >\n//                 <option value=\"PENDING\">PENDING</option>\n//                 <option value=\"PROCESSING\">PROCESSING</option>\n//                 <option value=\"COMPLETED\">COMPLETED</option>\n//                 <option value=\"CANCELLED\">CANCELLED</option>\n//             </select>\n//             <button onClick={()=>handleUpdateStatus()}>Update Staus</button>\n//            </div>\n//            </>\n//         )}\n//       </div>\n//     </Layout>\n//   )\n// };\n\n// export default TransactionDetailsPage;\n\nconst TransactionDetailsPage = () => {\n  _s();\n  const {\n    transactionId\n  } = useParams();\n  const [transaction, setTransaction] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const getTransaction = async () => {\n      try {\n        const transactionData = await ApiService.getTransactionById(transactionId);\n        if (transactionData.status === 200) {\n          setTransaction(transactionData.transaction);\n          setStatus(transactionData.transaction.status);\n        }\n      } catch (error) {\n        var _error$response, _error$response$data;\n        showMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Error Getting a transaction: \" + error);\n      }\n    };\n    getTransaction();\n  }, [transactionId]);\n  useEffect(() => {\n    const fetchImage = async () => {\n      if (transaction && transaction.product) {\n        const url = await getImageUrl(transaction.product.name);\n        setImageUrl(url);\n      }\n    };\n    fetchImage();\n  }, [transaction]);\n  const handleUpdateStatus = async () => {\n    try {\n      await ApiService.updateTransactionStatus(transactionId, status);\n      navigate(\"/transaction\");\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      showMessage(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Error Updating a transaction: \" + error);\n    }\n  };\n  const showMessage = msg => {\n    setMessage(msg);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, 4000);\n  };\n  const fetchImageFromPexels = async query => {\n    try {\n      var _response$data$photos, _response$data$photos2;\n      const response = await axios.get(`https://api.pexels.com/v1/search?query=${query}&per_page=1`, {\n        headers: {\n          Authorization: PEXELS_API_KEY\n        }\n      });\n      const imageUrl = ((_response$data$photos = response.data.photos[0]) === null || _response$data$photos === void 0 ? void 0 : (_response$data$photos2 = _response$data$photos.src) === null || _response$data$photos2 === void 0 ? void 0 : _response$data$photos2.medium) || 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\n      console.log('Fetched image URL:', imageUrl); // Log the URL\n      return imageUrl;\n    } catch (error) {\n      console.error('Error fetching image from Pexels:', error);\n      return 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\n    }\n  };\n  const getImageUrl = async productName => {\n    const pexelsImageUrl = await fetchImageFromPexels(productName);\n    return pexelsImageUrl;\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-details-page\",\n      children: transaction && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Transaction Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Type: \", transaction.transactionType]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Status: \", transaction.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", transaction.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Note: \", transaction.note]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Products: \", transaction.totalProducts]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Price: \", transaction.totalPrice.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Create AT: \", new Date(transaction.createdAt).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), transaction.updatedAt && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Updated At: \", new Date(transaction.updatedAt).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Product Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Name: \", transaction.product.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"SKU: \", transaction.product.sku]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Price: \", transaction.product.price.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Stock Quantity: \", transaction.product.stockQuantity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", transaction.product.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageUrl,\n            alt: transaction.product.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"User Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Name: \", transaction.user.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Email: \", transaction.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Phone Number: \", transaction.user.phoneNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Role: \", transaction.user.role]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Create AT: \", new Date(transaction.createdAt).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this), transaction.suppliers && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Supplier Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Name: \", transaction.supplier.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Contact Address: \", transaction.supplier.contactInfo]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Address: \", transaction.supplier.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-card transaction-staus-update\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Status: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: status,\n            onChange: e => setStatus(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"PENDING\",\n              children: \"PENDING\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"PROCESSING\",\n              children: \"PROCESSING\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"COMPLETED\",\n              children: \"COMPLETED\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"CANCELLED\",\n              children: \"CANCELLED\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleUpdateStatus,\n            children: \"Update Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionDetailsPage, \"sTLkRUgRykMHJ0lpfMN9HX0t4y8=\", true);\n_c = TransactionDetailsPage;\nexport default TransactionDetailsPage;\nvar _c;\n$RefreshReg$(_c, \"TransactionDetailsPage\");","map":{"version":3,"names":["TransactionDetailsPage","_s","transactionId","useParams","transaction","setTransaction","useState","message","setMessage","status","setStatus","imageUrl","setImageUrl","navigate","useNavigate","useEffect","getTransaction","transactionData","ApiService","getTransactionById","error","_error$response","_error$response$data","showMessage","response","data","fetchImage","product","url","getImageUrl","name","handleUpdateStatus","updateTransactionStatus","_error$response2","_error$response2$data","msg","setTimeout","fetchImageFromPexels","query","_response$data$photos","_response$data$photos2","axios","get","headers","Authorization","PEXELS_API_KEY","photos","src","medium","console","log","productName","pexelsImageUrl","_jsxDEV","Layout","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_Fragment","transactionType","description","note","totalProducts","totalPrice","toFixed","Date","createdAt","toLocaleString","updatedAt","sku","price","stockQuantity","alt","user","email","phoneNumber","role","suppliers","supplier","contactInfo","address","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/2370843/OneDrive - Cognizant/Desktop/Project/IMS-react/frontend/src/pages/TransactionDetailsPage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Layout from \"../component/Layout\";\r\n// import ApiService from \"../service/ApiService\";\r\n// import { useNavigate, useParams } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n\r\n// const PEXELS_API_KEY = 'TkOcFNcK1JNYwaHBziZwMVXoeQMwBUweo7C7z3RsEotA1uO0IcuScJ4d'; // Replace with your Pexels API key\r\n\r\n// // const importAll = (r) => {\r\n// //   let images = {};\r\n// //   r.keys().forEach((item, index) => {\r\n// //     images[item.replace('./', '')] = r(item);\r\n// //   });\r\n// //   return images;\r\n// // };\r\n\r\n// // Import all images from the assets directory\r\n// // const localImages = importAll(require.context('../assets', false, /\\.(png|jpe?g|svg)$/));\r\n\r\n\r\n// const TransactionDetailsPage = () => {\r\n//   const { transactionId } = useParams();\r\n//   const [transaction, setTransaction] = useState(null);\r\n//   const [message, setMessage] = useState(\"\");\r\n//   const [status, setStatus] = useState(\"\");\r\n\r\n//   const navigate = useNavigate();\r\n\r\n\r\n//   useEffect(() => {\r\n//     const getTransaction = async () => {\r\n//       try {\r\n//         const transactionData = await ApiService.getTransactionById(transactionId);\r\n\r\n//         if (transactionData.status === 200) {\r\n//             setTransaction(transactionData.transaction);\r\n//             setStatus(transactionData.transaction.status);\r\n//         }\r\n//       } catch (error) {\r\n//         showMessage(\r\n//           error.response?.data?.message || \"Error Getting a transaction: \" + error\r\n//         );\r\n//       }\r\n//     };\r\n\r\n//     getTransaction();\r\n//   }, [transactionId]);\r\n\r\n\r\n// //update transaction status\r\n// const handleUpdateStatus = async()=>{\r\n//     try {\r\n//         ApiService.updateTransactionStatus(transactionId, status);\r\n//         navigate(\"/transaction\")\r\n//     } catch (error) {\r\n//         showMessage(\r\n//           error.response?.data?.message || \"Error Updating a transactions: \" + error\r\n//         );\r\n        \r\n//     }\r\n// }\r\n\r\n\r\n//   //Method to show message or errors\r\n//   const showMessage = (msg) => {\r\n//     setMessage(msg);\r\n//     setTimeout(() => {\r\n//       setMessage(\"\");\r\n//     }, 4000);\r\n//   };\r\n\r\n\r\n//   // naya change yaha hai \r\n  \r\n//   // Function to fetch image from Pexels API\r\n//   const fetchImageFromPexels = async (query) => {\r\n//     try {\r\n//       const response = await axios.get(`https://api.pexels.com/v1/search?query=${query}&per_page=1`, {\r\n//         headers: {\r\n//           Authorization: PEXELS_API_KEY,\r\n//         },\r\n//       });\r\n//       return response.data.photos[0]?.src?.medium || 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\r\n//     } catch (error) {\r\n//       console.error('Error fetching image from Pexels:', error);\r\n//       return 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\r\n//     }\r\n//   };\r\n\r\n//   // Function to get image URL (local or Pexels)\r\n//   const getImageUrl = async (productName) => {\r\n//     // Check for local image first\r\n//     console.log(\"imgae hbfjsfkf fks f fks :: \"+ productName);\r\n//     // const localImageKey = Object.keys(localImages).find((key) =>\r\n//     //   key.toLowerCase().includes(productName.toLowerCase())\r\n//     // );\r\n\r\n//     // if (localImageKey) {\r\n//     //   return localImages[localImageKey]; // Return local image if found\r\n//     // }\r\n\r\n//     // If local image not found, fetch from Pexels\r\n//     const pexelsImageUrl = await fetchImageFromPexels(productName);\r\n\r\n//     console.log(pexelsImageUrl);\r\n//     return pexelsImageUrl;\r\n//   };\r\n\r\n\r\n//   return(\r\n//     <Layout>\r\n        \r\n//       {message && <p className=\"message\">{message}</p>}\r\n//       <div className=\"transaction-details-page\">\r\n//         {transaction && (\r\n//            <>\r\n//            {/* Transaction base information */}\r\n//            <div className=\"section-card\">\r\n//                 <h2>Transaction Information</h2>\r\n//                 <p>Type: {transaction.transactionType}</p>\r\n//                 <p>Status: {transaction.status}</p>\r\n//                 <p>Description: {transaction.description}</p>\r\n//                 <p>Note: {transaction.note}</p>\r\n//                 <p>Total Products: {transaction.totalProducts}</p>\r\n//                 <p>Total Price: {transaction.totalPrice.toFixed(2)}</p>\r\n//                 <p>Create AT: {new Date(transaction.createdAt).toLocaleString()}</p>\r\n\r\n//                 {transaction.updatedAt && (\r\n//                 <p>Updated At: {new Date(transaction.updatedAt).toLocaleString()}</p>\r\n//                 )}\r\n//            </div>\r\n\r\n//            {/* Product information of the transaction */}\r\n//            <div className=\"section-card\">\r\n//                 <h2>Product Information</h2>\r\n//                 <p>Name: {transaction.product.name}</p>\r\n//                 <p>SKU: {transaction.product.sku}</p>\r\n//                 <p>Price: {transaction.product.price.toFixed(2)}</p>\r\n//                 <p>Stock Quantity: {transaction.product.stockQuantity}</p>\r\n//                 <p>Description: {transaction.product.description}</p>\r\n// {/* \r\n//                 {transaction.product.imageUrl && (\r\n//                 <img src={getImageUrl(`${transaction.product.name}`)} alt={transaction.product.name} />\r\n//                 )} */}\r\n//                  {getImageUrl && (\r\n//                 <img src={getImageUrl(`${transaction.product.name}`)} alt={transaction.product.name} />\r\n//               )}\r\n//            </div>\r\n\r\n//            {/* User information who made the transaction */}\r\n//            <div className=\"section-card\">\r\n//                 <h2>User Information</h2>\r\n//                 <p>Name: {transaction.user.name}</p>\r\n//                 <p>Email: {transaction.user.email}</p>\r\n//                 <p>Phone Number: {transaction.user.phoneNumber}</p>\r\n//                 <p>Role: {transaction.user.role}</p>\r\n//                 <p>Create AT: {new Date(transaction.createdAt).toLocaleString()}</p>\r\n                \r\n//            </div>\r\n\r\n\r\n\r\n//            {/* Supplier information who made the transaction */}\r\n//            {transaction.suppliers && (\r\n//            <div className=\"section-card\">\r\n//                 <h2>Supplier Information</h2>\r\n//                 <p>Name: {transaction.supplier.name}</p>\r\n//                 <p>Contact Address: {transaction.supplier.contactInfo}</p>\r\n//                 <p>Address: {transaction.supplier.address}</p> \r\n//            </div>\r\n//            )}\r\n\r\n//            {/* UPDATE TRANSACTION STATUS */}\r\n//            <div className=\"section-card transaction-staus-update\">\r\n//             <label>Status: </label>\r\n//             <select \r\n//             value={status}\r\n//             onChange={(e)=> setStatus(e.target.value)}\r\n//             >\r\n//                 <option value=\"PENDING\">PENDING</option>\r\n//                 <option value=\"PROCESSING\">PROCESSING</option>\r\n//                 <option value=\"COMPLETED\">COMPLETED</option>\r\n//                 <option value=\"CANCELLED\">CANCELLED</option>\r\n//             </select>\r\n//             <button onClick={()=>handleUpdateStatus()}>Update Staus</button>\r\n//            </div>\r\n//            </>\r\n//         )}\r\n//       </div>\r\n//     </Layout>\r\n//   )\r\n// };\r\n\r\n// export default TransactionDetailsPage;\r\n\r\n\r\nconst TransactionDetailsPage = () => {\r\n  const { transactionId } = useParams();\r\n  const [transaction, setTransaction] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [imageUrl, setImageUrl] = useState('');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const getTransaction = async () => {\r\n      try {\r\n        const transactionData = await ApiService.getTransactionById(transactionId);\r\n\r\n        if (transactionData.status === 200) {\r\n          setTransaction(transactionData.transaction);\r\n          setStatus(transactionData.transaction.status);\r\n        }\r\n      } catch (error) {\r\n        showMessage(\r\n          error.response?.data?.message || \"Error Getting a transaction: \" + error\r\n        );\r\n      }\r\n    };\r\n\r\n    getTransaction();\r\n  }, [transactionId]);\r\n\r\n  useEffect(() => {\r\n    const fetchImage = async () => {\r\n      if (transaction && transaction.product) {\r\n        const url = await getImageUrl(transaction.product.name);\r\n        setImageUrl(url);\r\n      }\r\n    };\r\n\r\n    fetchImage();\r\n  }, [transaction]);\r\n\r\n  const handleUpdateStatus = async () => {\r\n    try {\r\n      await ApiService.updateTransactionStatus(transactionId, status);\r\n      navigate(\"/transaction\");\r\n    } catch (error) {\r\n      showMessage(\r\n        error.response?.data?.message || \"Error Updating a transaction: \" + error\r\n      );\r\n    }\r\n  };\r\n\r\n  const showMessage = (msg) => {\r\n    setMessage(msg);\r\n    setTimeout(() => {\r\n      setMessage(\"\");\r\n    }, 4000);\r\n  };\r\n\r\n  const fetchImageFromPexels = async (query) => {\r\n    try {\r\n      const response = await axios.get(`https://api.pexels.com/v1/search?query=${query}&per_page=1`, {\r\n        headers: {\r\n          Authorization: PEXELS_API_KEY,\r\n        },\r\n      });\r\n      const imageUrl = response.data.photos[0]?.src?.medium || 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\r\n      console.log('Fetched image URL:', imageUrl); // Log the URL\r\n      return imageUrl;\r\n    } catch (error) {\r\n      console.error('Error fetching image from Pexels:', error);\r\n      return 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\r\n    }\r\n  };\r\n\r\n  const getImageUrl = async (productName) => {\r\n    const pexelsImageUrl = await fetchImageFromPexels(productName);\r\n    return pexelsImageUrl;\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      {message && <p className=\"message\">{message}</p>}\r\n      <div className=\"transaction-details-page\">\r\n        {transaction && (\r\n          <>\r\n            <div className=\"section-card\">\r\n              <h2>Transaction Information</h2>\r\n              <p>Type: {transaction.transactionType}</p>\r\n              <p>Status: {transaction.status}</p>\r\n              <p>Description: {transaction.description}</p>\r\n              <p>Note: {transaction.note}</p>\r\n              <p>Total Products: {transaction.totalProducts}</p>\r\n              <p>Total Price: {transaction.totalPrice.toFixed(2)}</p>\r\n              <p>Create AT: {new Date(transaction.createdAt).toLocaleString()}</p>\r\n              {transaction.updatedAt && (\r\n                <p>Updated At: {new Date(transaction.updatedAt).toLocaleString()}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"section-card\">\r\n              <h2>Product Information</h2>\r\n              <p>Name: {transaction.product.name}</p>\r\n              <p>SKU: {transaction.product.sku}</p>\r\n              <p>Price: {transaction.product.price.toFixed(2)}</p>\r\n              <p>Stock Quantity: {transaction.product.stockQuantity}</p>\r\n              <p>Description: {transaction.product.description}</p>\r\n              {imageUrl && (\r\n                <img src={imageUrl} alt={transaction.product.name} />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"section-card\">\r\n              <h2>User Information</h2>\r\n              <p>Name: {transaction.user.name}</p>\r\n              <p>Email: {transaction.user.email}</p>\r\n              <p>Phone Number: {transaction.user.phoneNumber}</p>\r\n              <p>Role: {transaction.user.role}</p>\r\n              <p>Create AT: {new Date(transaction.createdAt).toLocaleString()}</p>\r\n            </div>\r\n\r\n            {transaction.suppliers && (\r\n              <div className=\"section-card\">\r\n                <h2>Supplier Information</h2>\r\n                <p>Name: {transaction.supplier.name}</p>\r\n                <p>Contact Address: {transaction.supplier.contactInfo}</p>\r\n                <p>Address: {transaction.supplier.address}</p>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"section-card transaction-staus-update\">\r\n              <label>Status: </label>\r\n              <select\r\n                value={status}\r\n                onChange={(e) => setStatus(e.target.value)}\r\n              >\r\n                <option value=\"PENDING\">PENDING</option>\r\n                <option value=\"PROCESSING\">PROCESSING</option>\r\n                <option value=\"COMPLETED\">COMPLETED</option>\r\n                <option value=\"CANCELLED\">CANCELLED</option>\r\n              </select>\r\n              <button onClick={handleUpdateStatus}>Update Status</button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TransactionDetailsPage;"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,MAAMA,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM;IAAEC;EAAc,CAAC,GAAGC,SAAS,CAAC,CAAC;EACrC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMO,QAAQ,GAAGC,WAAW,CAAC,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACd,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,eAAe,GAAG,MAAMC,UAAU,CAACC,kBAAkB,CAACjB,aAAa,CAAC;QAE1E,IAAIe,eAAe,CAACR,MAAM,KAAK,GAAG,EAAE;UAClCJ,cAAc,CAACY,eAAe,CAACb,WAAW,CAAC;UAC3CM,SAAS,CAACO,eAAe,CAACb,WAAW,CAACK,MAAM,CAAC;QAC/C;MACF,CAAC,CAAC,OAAOW,KAAK,EAAE;QAAA,IAAAC,eAAA,EAAAC,oBAAA;QACdC,WAAW,CACT,EAAAF,eAAA,GAAAD,KAAK,CAACI,QAAQ,cAAAH,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBI,IAAI,cAAAH,oBAAA,uBAApBA,oBAAA,CAAsBf,OAAO,KAAI,+BAA+B,GAAGa,KACrE,CAAC;MACH;IACF,CAAC;IAEDJ,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACd,aAAa,CAAC,CAAC;EAEnBa,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAItB,WAAW,IAAIA,WAAW,CAACuB,OAAO,EAAE;QACtC,MAAMC,GAAG,GAAG,MAAMC,WAAW,CAACzB,WAAW,CAACuB,OAAO,CAACG,IAAI,CAAC;QACvDlB,WAAW,CAACgB,GAAG,CAAC;MAClB;IACF,CAAC;IAEDF,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACtB,WAAW,CAAC,CAAC;EAEjB,MAAM2B,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMb,UAAU,CAACc,uBAAuB,CAAC9B,aAAa,EAAEO,MAAM,CAAC;MAC/DI,QAAQ,CAAC,cAAc,CAAC;IAC1B,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA,IAAAa,gBAAA,EAAAC,qBAAA;MACdX,WAAW,CACT,EAAAU,gBAAA,GAAAb,KAAK,CAACI,QAAQ,cAAAS,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBR,IAAI,cAAAS,qBAAA,uBAApBA,qBAAA,CAAsB3B,OAAO,KAAI,gCAAgC,GAAGa,KACtE,CAAC;IACH;EACF,CAAC;EAED,MAAMG,WAAW,GAAIY,GAAG,IAAK;IAC3B3B,UAAU,CAAC2B,GAAG,CAAC;IACfC,UAAU,CAAC,MAAM;MACf5B,UAAU,CAAC,EAAE,CAAC;IAChB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAM6B,oBAAoB,GAAG,MAAOC,KAAK,IAAK;IAC5C,IAAI;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MACF,MAAMhB,QAAQ,GAAG,MAAMiB,KAAK,CAACC,GAAG,CAAC,0CAA0CJ,KAAK,aAAa,EAAE;QAC7FK,OAAO,EAAE;UACPC,aAAa,EAAEC;QACjB;MACF,CAAC,CAAC;MACF,MAAMlC,QAAQ,GAAG,EAAA4B,qBAAA,GAAAf,QAAQ,CAACC,IAAI,CAACqB,MAAM,CAAC,CAAC,CAAC,cAAAP,qBAAA,wBAAAC,sBAAA,GAAvBD,qBAAA,CAAyBQ,GAAG,cAAAP,sBAAA,uBAA5BA,sBAAA,CAA8BQ,MAAM,KAAI,yEAAyE;MAClIC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEvC,QAAQ,CAAC,CAAC,CAAC;MAC7C,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACd6B,OAAO,CAAC7B,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO,yEAAyE;IAClF;EACF,CAAC;EAED,MAAMS,WAAW,GAAG,MAAOsB,WAAW,IAAK;IACzC,MAAMC,cAAc,GAAG,MAAMf,oBAAoB,CAACc,WAAW,CAAC;IAC9D,OAAOC,cAAc;EACvB,CAAC;EAED,oBACEC,OAAA,CAACC,MAAM;IAAAC,QAAA,GACJhD,OAAO,iBAAI8C,OAAA;MAAGG,SAAS,EAAC,SAAS;MAAAD,QAAA,EAAEhD;IAAO;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChDP,OAAA;MAAKG,SAAS,EAAC,0BAA0B;MAAAD,QAAA,EACtCnD,WAAW,iBACViD,OAAA,CAAAQ,SAAA;QAAAN,QAAA,gBACEF,OAAA;UAAKG,SAAS,EAAC,cAAc;UAAAD,QAAA,gBAC3BF,OAAA;YAAAE,QAAA,EAAI;UAAuB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChCP,OAAA;YAAAE,QAAA,GAAG,QAAM,EAACnD,WAAW,CAAC0D,eAAe;UAAA;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1CP,OAAA;YAAAE,QAAA,GAAG,UAAQ,EAACnD,WAAW,CAACK,MAAM;UAAA;YAAAgD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnCP,OAAA;YAAAE,QAAA,GAAG,eAAa,EAACnD,WAAW,CAAC2D,WAAW;UAAA;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC7CP,OAAA;YAAAE,QAAA,GAAG,QAAM,EAACnD,WAAW,CAAC4D,IAAI;UAAA;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC/BP,OAAA;YAAAE,QAAA,GAAG,kBAAgB,EAACnD,WAAW,CAAC6D,aAAa;UAAA;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClDP,OAAA;YAAAE,QAAA,GAAG,eAAa,EAACnD,WAAW,CAAC8D,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvDP,OAAA;YAAAE,QAAA,GAAG,aAAW,EAAC,IAAIa,IAAI,CAAChE,WAAW,CAACiE,SAAS,CAAC,CAACC,cAAc,CAAC,CAAC;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACnExD,WAAW,CAACmE,SAAS,iBACpBlB,OAAA;YAAAE,QAAA,GAAG,cAAY,EAAC,IAAIa,IAAI,CAAChE,WAAW,CAACmE,SAAS,CAAC,CAACD,cAAc,CAAC,CAAC;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CACrE;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAENP,OAAA;UAAKG,SAAS,EAAC,cAAc;UAAAD,QAAA,gBAC3BF,OAAA;YAAAE,QAAA,EAAI;UAAmB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5BP,OAAA;YAAAE,QAAA,GAAG,QAAM,EAACnD,WAAW,CAACuB,OAAO,CAACG,IAAI;UAAA;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvCP,OAAA;YAAAE,QAAA,GAAG,OAAK,EAACnD,WAAW,CAACuB,OAAO,CAAC6C,GAAG;UAAA;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrCP,OAAA;YAAAE,QAAA,GAAG,SAAO,EAACnD,WAAW,CAACuB,OAAO,CAAC8C,KAAK,CAACN,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpDP,OAAA;YAAAE,QAAA,GAAG,kBAAgB,EAACnD,WAAW,CAACuB,OAAO,CAAC+C,aAAa;UAAA;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1DP,OAAA;YAAAE,QAAA,GAAG,eAAa,EAACnD,WAAW,CAACuB,OAAO,CAACoC,WAAW;UAAA;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACpDjD,QAAQ,iBACP0C,OAAA;YAAKN,GAAG,EAAEpC,QAAS;YAACgE,GAAG,EAAEvE,WAAW,CAACuB,OAAO,CAACG;UAAK;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CACrD;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAENP,OAAA;UAAKG,SAAS,EAAC,cAAc;UAAAD,QAAA,gBAC3BF,OAAA;YAAAE,QAAA,EAAI;UAAgB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzBP,OAAA;YAAAE,QAAA,GAAG,QAAM,EAACnD,WAAW,CAACwE,IAAI,CAAC9C,IAAI;UAAA;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpCP,OAAA;YAAAE,QAAA,GAAG,SAAO,EAACnD,WAAW,CAACwE,IAAI,CAACC,KAAK;UAAA;YAAApB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtCP,OAAA;YAAAE,QAAA,GAAG,gBAAc,EAACnD,WAAW,CAACwE,IAAI,CAACE,WAAW;UAAA;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnDP,OAAA;YAAAE,QAAA,GAAG,QAAM,EAACnD,WAAW,CAACwE,IAAI,CAACG,IAAI;UAAA;YAAAtB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpCP,OAAA;YAAAE,QAAA,GAAG,aAAW,EAAC,IAAIa,IAAI,CAAChE,WAAW,CAACiE,SAAS,CAAC,CAACC,cAAc,CAAC,CAAC;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC,EAELxD,WAAW,CAAC4E,SAAS,iBACpB3B,OAAA;UAAKG,SAAS,EAAC,cAAc;UAAAD,QAAA,gBAC3BF,OAAA;YAAAE,QAAA,EAAI;UAAoB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC7BP,OAAA;YAAAE,QAAA,GAAG,QAAM,EAACnD,WAAW,CAAC6E,QAAQ,CAACnD,IAAI;UAAA;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxCP,OAAA;YAAAE,QAAA,GAAG,mBAAiB,EAACnD,WAAW,CAAC6E,QAAQ,CAACC,WAAW;UAAA;YAAAzB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1DP,OAAA;YAAAE,QAAA,GAAG,WAAS,EAACnD,WAAW,CAAC6E,QAAQ,CAACE,OAAO;UAAA;YAAA1B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CACN,eAEDP,OAAA;UAAKG,SAAS,EAAC,uCAAuC;UAAAD,QAAA,gBACpDF,OAAA;YAAAE,QAAA,EAAO;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACvBP,OAAA;YACE+B,KAAK,EAAE3E,MAAO;YACd4E,QAAQ,EAAGC,CAAC,IAAK5E,SAAS,CAAC4E,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YAAA7B,QAAA,gBAE3CF,OAAA;cAAQ+B,KAAK,EAAC,SAAS;cAAA7B,QAAA,EAAC;YAAO;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACxCP,OAAA;cAAQ+B,KAAK,EAAC,YAAY;cAAA7B,QAAA,EAAC;YAAU;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC9CP,OAAA;cAAQ+B,KAAK,EAAC,WAAW;cAAA7B,QAAA,EAAC;YAAS;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC5CP,OAAA;cAAQ+B,KAAK,EAAC,WAAW;cAAA7B,QAAA,EAAC;YAAS;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC,eACTP,OAAA;YAAQmC,OAAO,EAAEzD,kBAAmB;YAAAwB,QAAA,EAAC;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC;MAAA,eACN;IACH;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb,CAAC;AAAC3D,EAAA,CAlJID,sBAAsB;AAAAyF,EAAA,GAAtBzF,sBAAsB;AAoJ5B,eAAeA,sBAAsB;AAAC,IAAAyF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}