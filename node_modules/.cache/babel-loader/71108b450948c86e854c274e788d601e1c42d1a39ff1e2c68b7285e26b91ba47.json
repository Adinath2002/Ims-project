{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import Layout from \"../component/Layout\";\n// import ApiService from \"../service/ApiService\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import axios from \"axios\";\n\n// const PEXELS_API_KEY = 'TkOcFNcK1JNYwaHBziZwMVXoeQMwBUweo7C7z3RsEotA1uO0IcuScJ4d'; // Replace with your Pexels API key\n\n// // const importAll = (r) => {\n// //   let images = {};\n// //   r.keys().forEach((item, index) => {\n// //     images[item.replace('./', '')] = r(item);\n// //   });\n// //   return images;\n// // };\n\n// // Import all images from the assets directory\n// // const localImages = importAll(require.context('../assets', false, /\\.(png|jpe?g|svg)$/));\n\n// const TransactionDetailsPage = () => {\n//   const { transactionId } = useParams();\n//   const [transaction, setTransaction] = useState(null);\n//   const [message, setMessage] = useState(\"\");\n//   const [status, setStatus] = useState(\"\");\n\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const getTransaction = async () => {\n//       try {\n//         const transactionData = await ApiService.getTransactionById(transactionId);\n\n//         if (transactionData.status === 200) {\n//             setTransaction(transactionData.transaction);\n//             setStatus(transactionData.transaction.status);\n//         }\n//       } catch (error) {\n//         showMessage(\n//           error.response?.data?.message || \"Error Getting a transaction: \" + error\n//         );\n//       }\n//     };\n\n//     getTransaction();\n//   }, [transactionId]);\n\n// //update transaction status\n// const handleUpdateStatus = async()=>{\n//     try {\n//         ApiService.updateTransactionStatus(transactionId, status);\n//         navigate(\"/transaction\")\n//     } catch (error) {\n//         showMessage(\n//           error.response?.data?.message || \"Error Updating a transactions: \" + error\n//         );\n\n//     }\n// }\n\n//   //Method to show message or errors\n//   const showMessage = (msg) => {\n//     setMessage(msg);\n//     setTimeout(() => {\n//       setMessage(\"\");\n//     }, 4000);\n//   };\n\n//   // naya change yaha hai \n\n//   // Function to fetch image from Pexels API\n//   const fetchImageFromPexels = async (query) => {\n//     try {\n//       const response = await axios.get(`https://api.pexels.com/v1/search?query=${query}&per_page=1`, {\n//         headers: {\n//           Authorization: PEXELS_API_KEY,\n//         },\n//       });\n//       return response.data.photos[0]?.src?.medium || 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\n//     } catch (error) {\n//       console.error('Error fetching image from Pexels:', error);\n//       return 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\n//     }\n//   };\n\n//   // Function to get image URL (local or Pexels)\n//   const getImageUrl = async (productName) => {\n//     // Check for local image first\n//     console.log(\"imgae hbfjsfkf fks f fks :: \"+ productName);\n//     // const localImageKey = Object.keys(localImages).find((key) =>\n//     //   key.toLowerCase().includes(productName.toLowerCase())\n//     // );\n\n//     // if (localImageKey) {\n//     //   return localImages[localImageKey]; // Return local image if found\n//     // }\n\n//     // If local image not found, fetch from Pexels\n//     const pexelsImageUrl = await fetchImageFromPexels(productName);\n\n//     console.log(pexelsImageUrl);\n//     return pexelsImageUrl;\n//   };\n\n//   return(\n//     <Layout>\n\n//       {message && <p className=\"message\">{message}</p>}\n//       <div className=\"transaction-details-page\">\n//         {transaction && (\n//            <>\n//            {/* Transaction base information */}\n//            <div className=\"section-card\">\n//                 <h2>Transaction Information</h2>\n//                 <p>Type: {transaction.transactionType}</p>\n//                 <p>Status: {transaction.status}</p>\n//                 <p>Description: {transaction.description}</p>\n//                 <p>Note: {transaction.note}</p>\n//                 <p>Total Products: {transaction.totalProducts}</p>\n//                 <p>Total Price: {transaction.totalPrice.toFixed(2)}</p>\n//                 <p>Create AT: {new Date(transaction.createdAt).toLocaleString()}</p>\n\n//                 {transaction.updatedAt && (\n//                 <p>Updated At: {new Date(transaction.updatedAt).toLocaleString()}</p>\n//                 )}\n//            </div>\n\n//            {/* Product information of the transaction */}\n//            <div className=\"section-card\">\n//                 <h2>Product Information</h2>\n//                 <p>Name: {transaction.product.name}</p>\n//                 <p>SKU: {transaction.product.sku}</p>\n//                 <p>Price: {transaction.product.price.toFixed(2)}</p>\n//                 <p>Stock Quantity: {transaction.product.stockQuantity}</p>\n//                 <p>Description: {transaction.product.description}</p>\n// {/* \n//                 {transaction.product.imageUrl && (\n//                 <img src={getImageUrl(`${transaction.product.name}`)} alt={transaction.product.name} />\n//                 )} */}\n//                  {getImageUrl && (\n//                 <img src={getImageUrl(`${transaction.product.name}`)} alt={transaction.product.name} />\n//               )}\n//            </div>\n\n//            {/* User information who made the transaction */}\n//            <div className=\"section-card\">\n//                 <h2>User Information</h2>\n//                 <p>Name: {transaction.user.name}</p>\n//                 <p>Email: {transaction.user.email}</p>\n//                 <p>Phone Number: {transaction.user.phoneNumber}</p>\n//                 <p>Role: {transaction.user.role}</p>\n//                 <p>Create AT: {new Date(transaction.createdAt).toLocaleString()}</p>\n\n//            </div>\n\n//            {/* Supplier information who made the transaction */}\n//            {transaction.suppliers && (\n//            <div className=\"section-card\">\n//                 <h2>Supplier Information</h2>\n//                 <p>Name: {transaction.supplier.name}</p>\n//                 <p>Contact Address: {transaction.supplier.contactInfo}</p>\n//                 <p>Address: {transaction.supplier.address}</p> \n//            </div>\n//            )}\n\n//            {/* UPDATE TRANSACTION STATUS */}\n//            <div className=\"section-card transaction-staus-update\">\n//             <label>Status: </label>\n//             <select \n//             value={status}\n//             onChange={(e)=> setStatus(e.target.value)}\n//             >\n//                 <option value=\"PENDING\">PENDING</option>\n//                 <option value=\"PROCESSING\">PROCESSING</option>\n//                 <option value=\"COMPLETED\">COMPLETED</option>\n//                 <option value=\"CANCELLED\">CANCELLED</option>\n//             </select>\n//             <button onClick={()=>handleUpdateStatus()}>Update Staus</button>\n//            </div>\n//            </>\n//         )}\n//       </div>\n//     </Layout>\n//   )\n// };\n\n// export default TransactionDetailsPage;","map":{"version":3,"names":[],"sources":["C:/Users/2370843/OneDrive - Cognizant/Desktop/Project/IMS-react/frontend/src/pages/TransactionDetailsPage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Layout from \"../component/Layout\";\r\n// import ApiService from \"../service/ApiService\";\r\n// import { useNavigate, useParams } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n\r\n// const PEXELS_API_KEY = 'TkOcFNcK1JNYwaHBziZwMVXoeQMwBUweo7C7z3RsEotA1uO0IcuScJ4d'; // Replace with your Pexels API key\r\n\r\n// // const importAll = (r) => {\r\n// //   let images = {};\r\n// //   r.keys().forEach((item, index) => {\r\n// //     images[item.replace('./', '')] = r(item);\r\n// //   });\r\n// //   return images;\r\n// // };\r\n\r\n// // Import all images from the assets directory\r\n// // const localImages = importAll(require.context('../assets', false, /\\.(png|jpe?g|svg)$/));\r\n\r\n\r\n// const TransactionDetailsPage = () => {\r\n//   const { transactionId } = useParams();\r\n//   const [transaction, setTransaction] = useState(null);\r\n//   const [message, setMessage] = useState(\"\");\r\n//   const [status, setStatus] = useState(\"\");\r\n\r\n//   const navigate = useNavigate();\r\n\r\n\r\n//   useEffect(() => {\r\n//     const getTransaction = async () => {\r\n//       try {\r\n//         const transactionData = await ApiService.getTransactionById(transactionId);\r\n\r\n//         if (transactionData.status === 200) {\r\n//             setTransaction(transactionData.transaction);\r\n//             setStatus(transactionData.transaction.status);\r\n//         }\r\n//       } catch (error) {\r\n//         showMessage(\r\n//           error.response?.data?.message || \"Error Getting a transaction: \" + error\r\n//         );\r\n//       }\r\n//     };\r\n\r\n//     getTransaction();\r\n//   }, [transactionId]);\r\n\r\n\r\n// //update transaction status\r\n// const handleUpdateStatus = async()=>{\r\n//     try {\r\n//         ApiService.updateTransactionStatus(transactionId, status);\r\n//         navigate(\"/transaction\")\r\n//     } catch (error) {\r\n//         showMessage(\r\n//           error.response?.data?.message || \"Error Updating a transactions: \" + error\r\n//         );\r\n        \r\n//     }\r\n// }\r\n\r\n\r\n//   //Method to show message or errors\r\n//   const showMessage = (msg) => {\r\n//     setMessage(msg);\r\n//     setTimeout(() => {\r\n//       setMessage(\"\");\r\n//     }, 4000);\r\n//   };\r\n\r\n\r\n//   // naya change yaha hai \r\n  \r\n//   // Function to fetch image from Pexels API\r\n//   const fetchImageFromPexels = async (query) => {\r\n//     try {\r\n//       const response = await axios.get(`https://api.pexels.com/v1/search?query=${query}&per_page=1`, {\r\n//         headers: {\r\n//           Authorization: PEXELS_API_KEY,\r\n//         },\r\n//       });\r\n//       return response.data.photos[0]?.src?.medium || 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\r\n//     } catch (error) {\r\n//       console.error('Error fetching image from Pexels:', error);\r\n//       return 'https://upload.wikimedia.org/wikipedia/commons/a/a3/Image-not-found.png';\r\n//     }\r\n//   };\r\n\r\n//   // Function to get image URL (local or Pexels)\r\n//   const getImageUrl = async (productName) => {\r\n//     // Check for local image first\r\n//     console.log(\"imgae hbfjsfkf fks f fks :: \"+ productName);\r\n//     // const localImageKey = Object.keys(localImages).find((key) =>\r\n//     //   key.toLowerCase().includes(productName.toLowerCase())\r\n//     // );\r\n\r\n//     // if (localImageKey) {\r\n//     //   return localImages[localImageKey]; // Return local image if found\r\n//     // }\r\n\r\n//     // If local image not found, fetch from Pexels\r\n//     const pexelsImageUrl = await fetchImageFromPexels(productName);\r\n\r\n//     console.log(pexelsImageUrl);\r\n//     return pexelsImageUrl;\r\n//   };\r\n\r\n\r\n//   return(\r\n//     <Layout>\r\n        \r\n//       {message && <p className=\"message\">{message}</p>}\r\n//       <div className=\"transaction-details-page\">\r\n//         {transaction && (\r\n//            <>\r\n//            {/* Transaction base information */}\r\n//            <div className=\"section-card\">\r\n//                 <h2>Transaction Information</h2>\r\n//                 <p>Type: {transaction.transactionType}</p>\r\n//                 <p>Status: {transaction.status}</p>\r\n//                 <p>Description: {transaction.description}</p>\r\n//                 <p>Note: {transaction.note}</p>\r\n//                 <p>Total Products: {transaction.totalProducts}</p>\r\n//                 <p>Total Price: {transaction.totalPrice.toFixed(2)}</p>\r\n//                 <p>Create AT: {new Date(transaction.createdAt).toLocaleString()}</p>\r\n\r\n//                 {transaction.updatedAt && (\r\n//                 <p>Updated At: {new Date(transaction.updatedAt).toLocaleString()}</p>\r\n//                 )}\r\n//            </div>\r\n\r\n//            {/* Product information of the transaction */}\r\n//            <div className=\"section-card\">\r\n//                 <h2>Product Information</h2>\r\n//                 <p>Name: {transaction.product.name}</p>\r\n//                 <p>SKU: {transaction.product.sku}</p>\r\n//                 <p>Price: {transaction.product.price.toFixed(2)}</p>\r\n//                 <p>Stock Quantity: {transaction.product.stockQuantity}</p>\r\n//                 <p>Description: {transaction.product.description}</p>\r\n// {/* \r\n//                 {transaction.product.imageUrl && (\r\n//                 <img src={getImageUrl(`${transaction.product.name}`)} alt={transaction.product.name} />\r\n//                 )} */}\r\n//                  {getImageUrl && (\r\n//                 <img src={getImageUrl(`${transaction.product.name}`)} alt={transaction.product.name} />\r\n//               )}\r\n//            </div>\r\n\r\n//            {/* User information who made the transaction */}\r\n//            <div className=\"section-card\">\r\n//                 <h2>User Information</h2>\r\n//                 <p>Name: {transaction.user.name}</p>\r\n//                 <p>Email: {transaction.user.email}</p>\r\n//                 <p>Phone Number: {transaction.user.phoneNumber}</p>\r\n//                 <p>Role: {transaction.user.role}</p>\r\n//                 <p>Create AT: {new Date(transaction.createdAt).toLocaleString()}</p>\r\n                \r\n//            </div>\r\n\r\n\r\n\r\n//            {/* Supplier information who made the transaction */}\r\n//            {transaction.suppliers && (\r\n//            <div className=\"section-card\">\r\n//                 <h2>Supplier Information</h2>\r\n//                 <p>Name: {transaction.supplier.name}</p>\r\n//                 <p>Contact Address: {transaction.supplier.contactInfo}</p>\r\n//                 <p>Address: {transaction.supplier.address}</p> \r\n//            </div>\r\n//            )}\r\n\r\n//            {/* UPDATE TRANSACTION STATUS */}\r\n//            <div className=\"section-card transaction-staus-update\">\r\n//             <label>Status: </label>\r\n//             <select \r\n//             value={status}\r\n//             onChange={(e)=> setStatus(e.target.value)}\r\n//             >\r\n//                 <option value=\"PENDING\">PENDING</option>\r\n//                 <option value=\"PROCESSING\">PROCESSING</option>\r\n//                 <option value=\"COMPLETED\">COMPLETED</option>\r\n//                 <option value=\"CANCELLED\">CANCELLED</option>\r\n//             </select>\r\n//             <button onClick={()=>handleUpdateStatus()}>Update Staus</button>\r\n//            </div>\r\n//            </>\r\n//         )}\r\n//       </div>\r\n//     </Layout>\r\n//   )\r\n// };\r\n\r\n// export default TransactionDetailsPage;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}